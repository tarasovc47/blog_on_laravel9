### создаём папку, например blog
### инициализируем её в гит
### скачиваем и распаковываем с гитхаба исходник с laravel в папку blog

### структура файлов такая:
### -Корневая папка проекта (в нашем случае - blog)
###     -docker-compose/
###         -nginx/
###             -larablog.conf
### -Dockerfile
### -docker-compose.yml
### -.gitignore


### в .gitignore записываем следующее:
/node_modules
/public/hot
/public/storage
/storage/*.key
/vendor
.env
.env.backup
.phpunit.result.cache
docker-compose.override.yml
Homestead.json
Homestead.yaml
npm-debug.log
yarn-error.log
/.idea
/.vscode
.gitignore

### файл .env.example копируем в .env и редактируем там участок про бд
DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=laravel-user
DB_PASSWORD=laravel-password

### в Dockerfile пишем:
FROM php:8.0-fpm

# Arguments defined in docker-compose.yml
ARG user
ARG uid

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    nodejs \
    npm

# Clear cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Install nodejs
RUN npm i

# Install PHP extensions
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd

# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Create system user to run Composer and Artisan Commands
RUN useradd -G www-data,root -u $uid -d /home/$user $user
RUN mkdir -p /home/$user/.composer && \
    chown -R $user:$user /home/$user

# Set working directory
WORKDIR /var/www

USER $user

### содержимое larablog.conf
server {
    listen 80;
    index index.php index.html;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/public;
    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
    location / {
        try_files $uri $uri/ /index.php?$query_string;
        gzip_static on;
    }
}


### содержимое docker-compose.yml
version: "3.8"
services:
  app:
    build:
      args:
        user: laravel
        uid: 1000
      context: ./
      dockerfile: Dockerfile
    image: larablog
    container_name: larablog-app
    restart: unless-stopped
    working_dir: /var/www/
    volumes:
      - ./:/var/www
    networks:
      - larablog

  db:
    image: mysql:8.0
    container_name: larablog-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
    networks:
      - larablog

  nginx:
    image: nginx:1.21.6
    container_name: larablog-nginx
    restart: unless-stopped
    ports:
      - 80:80
    volumes:
      - ./:/var/www
      - ./docker-compose/nginx:/etc/nginx/conf.d/
    networks:
      - larablog

  adminer:
    image: adminer
    restart: unless-stopped
    container_name: larablog-adminer
    ports:
      - 8080:8080
    depends_on:
      - db
    networks:
      - larablog

networks:
  larablog:
    driver: bridge

### запускаем командой
docker-compose up -d

### выполняем composer install
docker-compose exec app composer install

### и генерим ключ
docker-compose exec app php artisan key:generate

### генерим базовый контроллер блога и контроллер статей
docker-compose exec app php artisan make:Controller Blog/BaseController
docker-compose exec app php artisan make:Controller Blog/ArticleController --resource
docker-compose exec app php artisan make:model Blog/Article

### подключен dbal для редактирования столбцов
docker-compose exec app composer require doctrine/dbal
